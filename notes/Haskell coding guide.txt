Haskell coding guide
by Jason Stolaruk (jasonstolaruk@gmail.com)
"LYAH" and "RWH" refer to the Japanese translations of Learn You A Haskell and Real World Haskell.
"PaCP" refers to Parallel and Concurrent Programming in Haskell.
"BH" refers to Beginning Haskell: A Project-Based Approach.
"HP" refers to Haskell Programming From First Principles.


STYLE
==================================================

Indent 4 spaces following "do":
f = do
    a <- g

Indent 2 spaces following "if":
if x
  then y
  else z
(If it isn't unreasonably long, write your entire "if" statement on a single line.)

Indent 2 spaces following "case ... of" (when you want to break the line to save horizontal space).

Indent "where" 2 spaces, and indent the line following "where" 2 spaces:
f = x
  where
    x = y

Consider using a hanging lambda to split a line of code that is particularly long.

Indent 4 spaces following a hanging lambda. Bind to a hanging lambda instead of writing a "do" block when in doing so you are able to write just two lines of code:
m >>= \x ->
    return . succ $ x

Prefer function composition over parentheses:
lift . f $ x
...instead of...
lift (f x)

Avoid unnecessary parenthesis in cons expressions:
x : f y
...instead of...
x : (f y)

When appropriate, use "\" to split text across multiple lines. (RWH p.315)

Prefer "(<>)" over "mappend". Prefer "(++)" over "(<>)" when appending lists.

When you would otherwise be stringing more than 2 "(++)" or "(<>)" operations together, use "concat" instead.


READABILITY
==================================================

Consider using a list comprehension instead of "map".

You may use "let" in a list comprehension, like so: (BH p.71)
T.intercalate ", " [ y | x <- [1..10], let y = "Number " <> (T.pack . show $ x) ]

Prefer the composition of library functions over rolling your own fold.

Avoid explicit recursion when it is possible (and more readable) to use a fold.

Prefer using guards with "case" over using "if" inside "case":
case x of
  y | y == 1 -> z
    | otherwise -> y

Consider using a guard to handle an edge case when pattern matching on function parameters:
x `f` _ | x < 0 = ...
x `f` y         = ...

Use "flip" when it allows you to avoid writing a lambda:
flip delete
...instead of...
\acc x -> delete x acc

Use "null" instead of "(== [])".

Use "on" where applicable (in binary functions for sorting, etc.):
sortBy (compare `on` fst)
groupBy ((==) `on` clientName)

Prefer "maybe" over unwrapping a "Maybe" via pattern matching.
Similarly, prefer "either" over pattern matching.

Use "when", "unless", and "guard" for conditional evaluation in a monad.
when   :: Bool -> m () -> m () -- Evaluate the second parameter when "True".
unless :: Bool -> m () -> m () -- Evaluate the second parameter when "False".
guard  :: (MonadPlus m) => Bool -> m ()
"guard" will short-circuit chained expressions (by returning "mzero") on "False": (RWH p.375)
λ> mzero :: Maybe Char
Nothing
λ> guard (1 < 2) >> Just 'a'
Just 'a'
λ> guard (1 == 2) >> Just 'a'
Nothing

Use "void" instead of ">> return ()".
void :: (Functor f) => f a -> f () -- Evaluate the first parameter and return "f ()".

Use infinite lists when sensible:
head . (\\) [0..]

Derive "Enum" to use ".." in lists containing the type in question.
myLst = [ MyTypeA .. MyTypeC ]

Avoid manually instantiating "Show" as a means to pretty-print your type. Instead, consider rolling your own pretty-print typeclass.

Prefer strictness annotations (bang patterns) to "seq".


INFIX STYLE
==================================================

When defining an infix operator, consider including a fixity definition (in which you may specify associativity). (RWH p.244, 328)

If appropriate, use infix style when defining a data type. (RWH p.80)

Use infix style when it allows you to avoid writing a lambda:
(`f` y)
...instead of...
\x -> f x y

Don't shy away from composing a function with an infix operator:
("You entered:\n" ++) . map toUpper
head . (\\) [0..]


PACKAGES, MODULES, AND IMPORTING/EXPORTING
==================================================

The version numbers you assign to your packages should follow the official Package Versioning Policy. (BH p.81)

Your main module should be named "Main" as opposed to "Foo.Main"; you may, however, put your main ".hs" file in the "Foo" directory.

Your modules should only export the functions that other modules need to use.
Your "Main" module may need only export "main".

However, in the case that you are developing a library, your library itself may contain multiple modules that export ALL of their functions. The primary module of your library can import all the other modules, and export only those functions that are meant to be part of the library's public API. Your ".cabal" file can specify that only the primary module is exposed.
See "http://lambda.jstolarek.com/2012/10/code-testing-in-haskell/".

Prefer explicit import lists over importing everything, unless your import list becomes unreasonably long or you are importing a module whose functions are familiar to most Haskell programmers.


NUMBERS
==================================================

"Integral" includes "Int" and "Integer".
"Fractional" includes "Float", "Double", "Rational" (a ratio of two integers), and "Scientific" (scientific notation).

"div"  - integral division   - divide "Integral"s, round down
"quot" - integral division   - divide "Integral"s, round towards zero
"(/)"  - fractional division - divide "Fractional"s

(x `quot` y) * y + (x `rem` y) == x
(x `div`  y) * y + (x `mod` y) == x

"Always use `div` for integral division unless you know what you’re doing. However, if the remainder of a division is the value you need, `rem` is usually the function you want." (HP p.115)

"You almost never want a Float unless you're doing graphics programming such as with OpenGL." (HP p.188)


NEWTYPE
==================================================

If your data type has a single constructor with a single field, use a "newtype" declaration instead of a "data" declaration.

Use "newtype" to hide an underlying implementation.

Utilize "GeneralizedNewtypeDeriving" to avoid boilerplate code, and to selectively expose the typeclasses of the underlying type wrapped by "newtype":
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
newtype MyMonoidList a = L { runList :: [a] } deriving (Monoid, Show)
myList = L ['A'..'F']
hex = Just myList <> Just (L ['0'..'9']) <> Nothing
λ> runList . fromJust $ hex
"ABCDEF0123456789"


FUNCTORS, APPLICATIVE FUNCTORS, AND MONADS
==================================================

A functor is a "container" type (kind "* -> *") that you can map over (transform).
Applicative functors allow you to take a normal function and apply it to a number of values, each inside applicative functor containers.
Monads allow you to take a value in a monad container and apply to it a function that expects a normal value (and returns a monadic value). (This is precisely what "(>>=)" does.)

Compose "fmap"s to lift a function inside multiple functor "layers":
λ> (fmap . fmap . fmap) (+ 1) $ Just (Just (Just 5))
Just (Just (Just 6))

"fmap", "liftA", and "liftM" are all very similar:
fmap  :: Functor f     => (a -> b) -> f a -> f b
liftA :: Applicative f => (a -> b) -> f a -> f b
liftM :: Monad m       => (a -> r) -> m a -> m r
Prefer "fmap" or "(<$>)" over "liftM".
Use "fmap" instead of "liftA" when you can.

Use applicative style instead of monadic code when possible.
"pure" is the applicative version of "return".
"(<*>)" is the applicative version of "ap". (For an explanation of how to use "ap", see BH p.177.)

When writing monadic code, consider what can be written outside the monad and lifted in.

Use "(>>)" and "(>>=)" instead of "do" when your functions can be neatly chained.

Consider using "(=<<)" instead of "(>>=)" alongside a "pipe" of composed functions: (RWH p.357)
output . parse =<< (liftIO . readProcess "/usr/bin/uptime" [] $ "")

Prefer...
f x <$> g y
...over...
g y >>= return . f x

Use "join" to "flatten" nested monadic values:
join :: Monad m => m (m a) -> m a
λ> join $ Just Nothing
Nothing

When rolling your own monad, keep in mind that... (LYAH p.348)
m >>= f
...can always be defined as...
join (fmap f m)

Monadic functions can be composed with the Kleisli composition operators ("(>=>)" and "(<=<)"):
(>=>) :: (Monad m) => (a -> m b) -> (b -> m c) -> a -> m c
(<=<) :: (Monad m) => (b -> m c) -> (a -> m b) -> a -> m c
(f >=> g) x = f x >>= g

Use "sequence" to take a list of monadic actions and evaluate them in turn, returning a list of the results: (LYAH p.170)
sequence [getLine, getLine, getLine] :: IO [String]
Note that "mapM f" is equivalent to "sequence . map f".
Note also the following interesting properties:
λ> sequence [Just 1, Just 2]
Just [1,2]
λ> sequence [Just 1, Nothing]
Nothing
This makes sense given the type signature: "sequence :: (Monad m) => [m a] -> m [a]".

Don't forget that you have a choice between "mapM" and "forM". (RWH p.221)

Use "filterM" to filter a normal list with a monadic predicate of type "(a -> m Bool)" (LYAH p.349):
filterM :: (Monad m) => (a -> m Bool) -> [a] -> m [a]
The predicate could, for example, be of type "Int -> Writer [String] Bool". A list in a monad is returned; the context of the monad is reflected in the final results.

Use the "Maybe" monad to chain together calculations that may fail:
λ> Nothing >> Just 5
Nothing
Compare the above to the following:
λ> Nothing `mplus` Just 5
Just 5

Use the "Either" monad for calculations that need to fail with an auxiliary value (for example, a message explaining the error). (LYAH p.340)
"Right" is for success, "Left" is for failure. "return" uses the "Right" constructor.
Binding a "Left" value to a function essentially does nothing; the value in the "Left" is preserved:
λ> succ <$> Left 10
Left 10

Use the list monad for non-deterministic calculations.
The following are all equivalent:
[1,2] >>= \x -> [3,4] >>= \y -> return (x,y)
do { x <- [1,2]; y <- [3,4]; return (x,y) }
(,) <$> [1,2] <*> [3,4]
[(x,y) | x <- [1,2], y <- [3,4]]

Use the "Writer" monad for logging, or to handle auxiliary values produced by, or concerning, your main computations.
Note that the auxiliary value in question must be a monoid; consider using a monoid with an efficient implementation of "mappend". (RWH p.391)
multWithLog :: Int -> Int -> Writer [String] Int -- ("String" does NOT have an efficient "mappend", but...)
multWithLog x y = tell [show x ++ " * " ++ show y ++ " = " ++ show res] >> return res
  where
    res = x * y
λ> runWriter $ multWithLog 5 3
(15,["5 * 3 = 15"])

Use the "Reader" monad to pass a read-only value to a handful of functions behind the scenes.

The function functor instance for "(->) r" is just function composition. This is the functor for "r -> a", written as "(->) r" (kind "* -> *").
instance Functor ((->) r) where
  f `fmap` g = \x -> f . g $ x
  -- Or just "fmap = (.)"!

λ> (fmap (*2) (+1)) 10 == (10+1) * 2
True
λ> let f = (+) <$> (*2) <*> (+1) in f 10 == (10*2) + (10+1) -- 31
True
λ> let tryMe = do { a <- (*2); b <- (+1); return (a+b) } in tryMe 10
31
λ> liftA2 (&&) even (> 4) 10
True


MONAD TRANSFORMERS (BH p.180-5)
==================================================

Monad transformers are themselves monads, and thus are kind "* -> *".

Transformers are named for the monad whose effects the transformer adds. For example, "StateT" adds the functionality of the "State" monad to another (inner) monad (in this case, the "State" monad is considered to be the "base" monad). Computations of the inner monad must be lifted.

All monad transformers instantiate the "MonadClass" typeclass, whose sole function is "lift".

StateT s Maybe a   ... "s -> (a, s)" becomes "s -> Maybe (a, s)"
MaybeT (State s) a ... "Maybe a"     becomes "s -> (Maybe a, s)"

In the "mtl" package, monads are defined in terms of their transformers: the transformer adds the effects of the base monad to the "Identity" monad. "Reader r" is defined as "ReaderT r Identity". (BH p. 183)

Transformer functionality is available in both "transformers" and "mtl". The "mtl" package has the advantage of being built in a clever way that eliminates the need for most calls to "lift" (note that "IO" functions must still be lifted). This is accomplished via a typeclass hierarchy.
An example of one such typeclass is "MonadReader" (found in "Control.Monad.Reader"). This typeclass defines those functions that provide the basic operations of the "Reader" monad: "ask", "local", and "reader". Then, "mtl" goes on to define instances of "MonadReader" for every combination that includes "ReaderT" as a layer.
Using "mtl", the following is thus possible:
readerWriterExample :: ReaderT Int (Writer String) Int
readerWriterExample = do
    x <- ask
    tell . show $ x -- No "lift"!
    return . succ $ x
But there's more! The function type signature given above limits your code to the explicitly stated monad stack. It is possible to rewrite the signature in terms of the "mtl" typeclasses, thereby making your function usable in any monad stack that includes the functionality of "ReaderT" and "WriterT":
readerWriterExample :: (MonadReader Int m, MonadWriter String m) => m Int

Prefer "liftIO" over "lift" when lifting to the inner "IO" layer of a monad transformer stack.

When defining a type synonym for a monad transformer stack, leave out the type variable.
type App = ReaderT AppConfig (StateT AppState IO)
...instead of...
type App a = ReaderT AppConfig (StateT AppState IO) a
The type variable will get in the way should you decide to add another transformer to the stack. (RWH p.444)


MONOIDS
==================================================

Use the "Ordering" instance of "Monoid" to sort by multiple criteria:
sortBy mySort
  where
    mySort (x, y) (x', y') = (x `compare` x') <> (y `compare` y')

Use "First" or "Last" when you have a number of "Maybe" values and you want to check whether or not they are all "Nothing" (and get either the first or last "Just"):
λ> getFirst $ First Nothing <> First (Just 'a') <> First Nothing
Just 'a'
λ> getFirst $ First Nothing <> First (Just 'a') <> First (Just 'b')
Just 'a'
λ> getLast $ Last Nothing <> Last (Just 'a') <> Last (Just 'b')
Just 'b'

When you have a number of computations, each resulting in an instance of "Monoid" wrapped in "Maybe", you can use the "Maybe a" instance of "Monoid" to work with those results in a "monoidal" fashion, without directly dealing with the "Maybe" wrapper:
λ> let myMap = M.fromList [('a',[1..5]),('b',[6..10])] -- Note that "[a]" is a monoid.
λ> M.lookup 'c' myMap <> M.lookup 'd' myMap <> M.lookup 'a' myMap
Just [1,2,3,4,5]

Certain nested computations, where the second computation should take place if the first one "fails," can be cleanly written using "mplus" from "MonadPlus":
λ> let myMap = M.fromList [('a',1),('b',2)]
λ> M.lookup 'c' myMap `mplus` M.lookup 'd' myMap `mplus` M.lookup 'a' myMap
Just 1
λ> let list = ['a'..'z']
λ> filter isDigit list `mplus` filter isLower list `mplus` filter (< 'd') list
"abc"
Note that "Nothing `mplus` Just 5" returns "Just 5", while "Nothing >> Just 5" returns "Nothing".
"Just 5 `mplus` Just 6" returns "Just 5".

"msum" from "MonadPlus" is analogous to "mconcat" from "Monoid" (but keep in mind that while "MonadPlus" types take a type variable, "Monoid" types do not; there are also more instances of "Monoid" than there are of "MonadPlus").
λ> :t msum
msum :: MonadPlus m => [m a] -> m a
λ> msum [Just 1, Nothing, Just 2] -- Keep the first "successful" value.
Just 1
Again, recall that "Just 5 `mplus` Just 6" returns "Just 5".

"mfilter" applies an everyday predicate to a "MonadPlus" value and returns "mzero" if the result is "False"; otherwise it returns the "MonadPlus" value.
mfilter :: MonadPlus m => (a -> Bool) -> m a -> m a
λ> mfilter even (Just 0)
Just 0
λ> mfilter odd (Just 0) == mzero -- "Nothing".
True


"foldr" VS. "foldl"  (HP chapter 10)
==================================================

"foldr" is the fold that you'll most often want to use with lists.
As a rule of thumb, use "foldr" on lists that might be infinite, or when building up a data structure. Use "foldl'" on finite lists, and when the fold comes down to a single value.

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f acc []     = acc
foldr f acc (x:xs) = f x (foldr f acc xs)

foldr (^) 1 [2,3,4]
2 ^ (3 ^ (4 ^ 1))

foldl :: (b -> a -> b) -> b -> [a] -> b
foldl f acc []     = acc
foldl f acc (x:xs) = foldl f (f acc x) xs

foldl (^) 1 [2,3,4]
(((1 ^ 2) ^ 3) ^ 4)

The first stage of folding is the traversal of (the recursing over) the spine. All folds traverse the spine in the same direction: from outermost (the head) to innermost; this is necessitated by the way lists are defined. Notably, "foldr" may not traverse the entire spine, but "foldl" always will.

The association of the folding function informs the direction that the folding proceeds following the traversal of the spine.

"foldr" associates to the right (the parentheses nest on the right side):
foldr (+) 0 [1, 2, 3] == 1 + (2 + (3 + 0))

"foldl" associates to the left:
foldl (+) 0 [1, 2, 3] == ((0 + 1) + 2) + 3

In the case of "foldr", if the folding function doesn't evaluate it's second argument, it will stop forcing the spine.

myAny :: (a -> Bool) -> [a] -> Bool
myAny f = foldr (\x acc -> f x || acc) False

myAny even [1..] == True

There is no guarantee that "foldr" will finish evaluating an infinite list; it often depends on the input data and the fold function used.

In most cases, you should prefer "foldl'" over "foldl". "foldl'" forces the values in the list cons cells as it traverses the spine, yielding better performance when folding long lists.


MORE ON FOLDING
==================================================

Use "unfoldr" to build up a list from a seed. (BH p.74)
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]

The "Foldable" typeclass ("import qualified Data.Foldable as F") is useful when you want to fold over structures other than lists. Simply by implementing "foldMap", you get all the other "Foldable" fold functions for free. (LYAH p.277)

"foldMap" is useful when you want to reduce a foldable structure to a single monoid value: (LYAH p.278)
foldMap :: (Monoid m, Foldable t) => (a -> m) -> t a -> m
Map over "t a" (where "t" is a "Foldable") with the "(a -> m)" function, producing monoid values. Then, use "mappend" to reduce the monoid values to a single monoid value.

"foldMap" can be used to convert a foldable structure into a list:
λ> myTree
Node 0 (Node 1 (Node 3 Empty Empty) (Node 4 Empty Empty)) (Node 2 (Node 5 Empty Empty) (Node 6 Empty Empty))
λ> F.foldMap (\x -> [x]) myTree
[3,1,4,0,5,2,6]

"foldM" is the monadic version of "foldl" (LYAH p.351):
foldl :: (a -> b -> a) -> a -> [b] -> a -- "a" is the type of the accumulator/result.
foldM :: (Monad m) => (a -> b -> m a) -> a -> [b] -> m a
"foldM" thus differs from "foldl" in that the function applied to each element of the list is monadic (it returns a value in a monad), and, naturally, the final results of the fold are likewise in a monad.

"scanr" and "scanl" are similar to "foldr" and "foldl". The scan functions return a list containing the values of the accumulator at each step.


LENSES
==================================================

In many cases, it is preferable to not surround lens operators with spaces. Similarly, do not surround "(.)" with spaces when using it to compose lenses:
obj^.name.to T.toUpper
...instead of...
obj ^. name . to T.toUpper

Consider using "to" with "(^.)" when sensible:
obj^.name.to T.toUpper

Prefer "folded" over using "map" with a lens:
myStrings^..folded.packed
[a..b]^..folded.to T.length


TUPLES
==================================================

Construct tuples using the "(,)" and "(,,)" tuple constructors when appropriate:
(,,) <$> ['a','b'] <*> [LT,GT] <*> [Left True, Right False]

Use "uncurry" to apply a two-argument function to the elements of a pair:
λ> uncurry compare ('a', 'b')
LT
Note that "curry" essentially does the opposite:
λ> curry fst 'a' undefined
'a'


ARROWS
==================================================

Use "first" and "second" to apply a function to an element of a tuple and get back the "updated" tuple: (RWH p.379)
λ> second odd ('a', 1)
('a',True)

"(***)" takes two functions and applies them to the elements of a pair, returning a new pair.
λ> ((+ 1) *** (* 2)) (1, 2)
(2,4)

"(&&&)" is called "fanout." It takes two functions and applies both of them to the same input, returning a pair.
λ> ((+ 1) &&& (* 2)) 2
(3,4)


MAPS
==================================================

Prefer "Map" over association lists.

Use "IntMap" instead of "Map" when your keys are of type "Int".

"HashMap" is a good choice when your keys are not of type "Int" and are hashable, as hash maps perform better than vanilla maps. (BH p.88)

Use "M.empty" instead of "M.fromList []" (where "M" is "Data.Map")

Instead of using "M.fromList" with a list containing a single key-value pair, use "M.singleton".

If you don't need to map values to keys, consider using "Set". (Note that "IntSet" also exists.)


PERFORMANCE
==================================================

Keep in mind that "length" must traverse the entirety of its argument. In some cases, pattern matching may provide a sufficient alternative to "length".

To avoid space leaks, prefer "foldr" and "foldl'" over "foldl". (RWH p.113)

In the vast majority of cases, prefer "Double" over "Float".

Prefer types that have simple raw machine representations over more complex types that must be stored on the heap (for example, prefer "Int" over "Integer").

Converting to and from a set is more performant than "nub". (BH p.88)
S.toList . S.fromList $ ["list with duplicates", "list with duplicates", "blah"]
Note that this will sort elements in ascending order.

Compile using "-O2" for optimization.
To make use of multiple cores, compile with "-threaded" and run with "+RTS -N".
Alternatively, just put the following line in your ".cabal" file:
ghc-options: -O2 -threaded -rtsopts -with-rtsopts=-N


LAZY VS. STRICT
==================================================

In your own data types, use strictness annotations/bang patterns ("!") on atomic fields such as "Int", "Double", and "Bool".

Apply "-funbox-strict-fields" when using strictness annotations/bang patterns ("!") on constructor fields. Consider specifying this option in the "ghc-options" field of your ".cabal" file.

When creating a recursively defined type, keep the spines lazy and make the leaves strict.


ERROR HANDLING
==================================================

Use "error" for "impossible" situations due to programmer error. ("error" throws an exception and halts the program.) (PaCP p.147)

In pure code, use "Maybe", or "Either" with a custom data type (representing the different possible error types, with auxiliary info) as the "Left" type. Don't throw exceptions in pure code.

When in the "IO" monad, use "throwIO" and "catch" ("catch" is normally used infix). Prefer "throwIO" over "throw", as the former guarantees ordering with respect to other "IO" operations, whereas the latter does not. (PaCP p.149-50)

Use "throwTo" to throw an asynchronous exception (that is, to throw an exception from one thread to another). (PaCP p.156)

You may also use "MonadError" ("Error" and "ErrorT"). While "throwIO" and "catch" are preferable when in the "IO" monad, use "ErrorT" when the base monad in your transformer stack is not "IO".

To catch any exception, write an exception handler that catches the "SomeException" type. (PaCP p.149)

The "catch" function is not the only way to catch exceptions. You may also consider using "try", "handle", and "handleJust". Prefer "handle" to "try" when the exception handler is short, but the action to perform is long. (PaCP p.149)

Use "onException" when you want to perform some special operation if and when an exception is raised, and then simply re-throw the exception. (PaCP p.149)

When you want to acquire a resource (a thread, for example), do some work with it, and then release the resource, consider using "bracket", "bracketOnError", or "finally". (LYAH p.184, PaCP p.150)


CONCURRENT PROGRAMMING: "MVar"s and asynchronous exceptions
============================================================

Use "forkFinally" when you need to perform some action after a thread has completed.
As a rule of thumb, any exception-handling function called as the first thing in a "forkIO" is better written using "forkFinally". (PaCP p.169)

Consider wrapping the "MVar" that contains your state in a "newtype". (PaCP p.133)

Use a "MVar" with a dummy value such as "()" to act as a lock on external state. (PaCP p.130)

When there are multiple threads accessing the same "MVar", the chance that some threads become blocked increases, as a "MVar" is only a one-place channel. As a possible solution, consider using an unbounded channel ("Chan"). (PaCP p.135, 162)
"TChan" is the STM version of "Chan". (PaCP p.184)
"TQueue" is faster than "TChan". (PaCP p.188)
If running out of memory is a concern, consider using a bounded channel instead of an unbounded channel. (PaCP p.189)

To avoid space leaks, consider using "$!" with "putMVar":
putMvar m $! Map.insert key val myMap
Use "seq" so as to get both brief locking and no space leaks. (PaCP p.135)

When performing an action asynchronously (and later waiting for its results), consider using the "async" library. (PaCP p.144, 151, 168, 182, 197)

To avoid deadlocking on a parent thread after a child thread has thrown an exception and died, the child thread may propagate any exceptions up to the parent thread. (PaCP p.151)

To cancel one thread from another, use "throwTo" and throw the "ThreadKilled" exception to the thread you wish to cancel (or use the "killThread" convenience function). (PaCP p.157)
Note that if the target thread does nothing to catch the exception, it will simply die silently.

"throwTo" will block as long as the target thread is masking asynchronous exceptions. (PaCP p.166)

An asynchronous exception may interrupt a thread when you are in the middle of updating some shared state. To guard against this, consider using one of the following functions: (PaCP p.158)
mask, mask_, modifyMVar, modifyMVar_, withMVar

The "bracket" family of abstractions have masking built in. (PaCP p.170)
The "acquire resource" code block of a "bracket" should perform at most just one blocking operation.
Any blocking operation in the "cleanup" block is interruptible by an asynchronous exception. (PaCP p.162)

The exception handler defined in a "catch" or a "handle" has masking built-in. Note that if you tail-call out of an exception handler, you will still remain inside its implicit mask. (PaCP p.167)

When taking two or more "MVar"s, always take them in the same order. Otherwise, your program is likely to deadlock. (PaCP p.162)


CONCURRENT PROGRAMMING: STM
==================================================

Functions in the STM monad have "STM" appended to their names.

Consider using "TMVar" as an alternative to "MVar". (PaCP p.178)

Be aware that the left-biased nature of "orElse" can have implications for fairness in some situations. (PaCP p.182)

"STM" is an instance of "MonadPlus":
mzero = retry
mplus = orElse
Using "msum", you can sequence a list of transactions such that they are chained together by "orElse"s: (RWH p.642)
atomically . msum . map helper $ myTVars

"throwSTM" and "catchSTM" concern exceptions in the "STM" monad. When an exception is thrown in STM, all the effects of the transaction are discarded (this is true for both synchronous and asynchronous exceptions). (PaCP p.186)

Code in the STM monad is automatically safe with respect to asynchronous exceptions. To this end, it can be useful even for state that is not shared between threads. (PaCP p.186)

Concerning performance: (PaCP p.194)
Never read an unbounded number of "TVars" in a single transaction.
Avoid expensive evaluation inside a transaction.
Avoid composing too many blocking operations together.


MISC
==================================================

Avoid constraints in type declarations. Instead, apply constraints to the functions that use your type, where necessary.

Prefer top level definitions of type "Char" over single-character strings or "Text":
a = 'a'
...instead of...
a = "a"
(When using "Text", just pack your "Char" as necessary.)

Be wary of approximation when comparing floating-point numbers: (BH p.20)
λ> 4.0 == 4.0000000000000001
True
λ> 4.0 `compare` 4.0000000000000001
EQ
